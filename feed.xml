<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://danj3.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://danj3.github.io/" rel="alternate" type="text/html" /><updated>2024-01-29T23:50:57-05:00</updated><id>https://danj3.github.io/feed.xml</id><title type="html">Unravel digital illusion</title><subtitle>investigating ideas and obstacles in software and systems with special attention on the BEAM (elixir/erlang), authentication, and security.</subtitle><author><name>Dan Janowski</name></author><entry><title type="html">function spec from anonymous function type spec</title><link href="https://danj3.github.io/2024/01/erlang-function-typespec/" rel="alternate" type="text/html" title="function spec from anonymous function type spec" /><published>2024-01-29T10:00:00-05:00</published><updated>2024-01-29T10:00:00-05:00</updated><id>https://danj3.github.io/2024/01/erlang-function-typespec</id><content type="html" xml:base="https://danj3.github.io/2024/01/erlang-function-typespec/">&lt;p&gt;A possible OTP feature request: syntax for declaring a function spec using a typespec for an anonymous function.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;If I define a type specification for an anonymous function, I would
like to be able to use that as a specification for a named function.
I believe behaviours convey the signatures of implemented
callbacks. If the contract is not defined this way, it would
be helpful to not repeat/reproduce the signature in all places.
Instead use the same named type as the spec signature.&lt;/p&gt;

&lt;p&gt;This could look something like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-module(mod).
-type foo_fun :: (binary() -&amp;gt; boolean()).
-export_type([foo_fun/0]).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another module:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-spec foo as mod:foo_fun.
foo(Str) -&amp;gt; false.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Dan Janowski</name></author><category term="erlang" /><category term="elixir" /><category term="erlang" /><category term="elixir" /><summary type="html">A possible OTP feature request: syntax for declaring a function spec using a typespec for an anonymous function.</summary></entry><entry><title type="html">No plural tables</title><link href="https://danj3.github.io/2024/01/plural-argument/" rel="alternate" type="text/html" title="No plural tables" /><published>2024-01-29T00:00:00-05:00</published><updated>2024-01-29T00:00:00-05:00</updated><id>https://danj3.github.io/2024/01/plural-argument</id><content type="html" xml:base="https://danj3.github.io/2024/01/plural-argument/">&lt;p&gt;Some opinionated database frameworks have made a point of
using pluralized names for database tables. I disagree with this opinion and will explain why.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;A database table is regarded as a type (or class) by a variety of
programming language frameworks. What that means is a type represents
an entity, be it a visitor, a product, or an article. Concretely this
means a table contains a collection of articles, and that’s where the
plural path derives its logic. However, in code the thing you get from
a given table is a singular thing. Thus an ‘article’ type should map to
an ‘article’ table, that being the type it stores. It doesn’t store an
‘articles’ type.&lt;/p&gt;

&lt;p&gt;By maintaining direct parity between the type ‘article’ and the table
‘article’, there is no morphology required to determine the name of a
table for a thing, they are the same.
This plays out badly for pluralization because plurals for many
things are not so simple as adding an ‘s’ suffix, or worse, some
plurals are the &lt;strong&gt;same&lt;/strong&gt; as the singular. A long time ago I found a
module in ActiveRecord (or a reference to it) of logic just to
deal with the English language morphology of pluralization. While
that was a tidy accomplishment, it seems like a horrible waste of
time and effort for an opinion that yields questionable, or in my
opinion negative, value.&lt;/p&gt;

&lt;p&gt;I say negative value because the programmer in observing this
pluralization has to keep track of how tables are named differently
than the types being dealt with in the code. Maybe directly touching
the database isn’t so frequent, but that makes a greater case
for having it all be exactly the same.&lt;/p&gt;</content><author><name>Dan Janowski</name></author><category term="database" /><category term="opinion" /><summary type="html">Some opinionated database frameworks have made a point of using pluralized names for database tables. I disagree with this opinion and will explain why.</summary></entry><entry><title type="html">First deployment at Hetzner with CDKTF</title><link href="https://danj3.github.io/2024/01/hetzner-with-cdktf/" rel="alternate" type="text/html" title="First deployment at Hetzner with CDKTF" /><published>2024-01-25T10:00:00-05:00</published><updated>2024-01-25T10:00:00-05:00</updated><id>https://danj3.github.io/2024/01/hetzner-with-cdktf</id><content type="html" xml:base="https://danj3.github.io/2024/01/hetzner-with-cdktf/">&lt;p&gt;Having a small project to deploy at Hetzner, I decided
to try using CDK for the first time outside of AWS. Hashicorp’s
CDKTF rolls AWS CDK with Terraform for doing IAC with
the many TF providers available.&lt;/p&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting started&lt;/h1&gt;

&lt;p&gt;I followed the install instructions for cdktf itself with
no issues. I used asdf to install nodejs 20.11.0. cdktf init 
with typescript as the language.&lt;/p&gt;

&lt;h2 id=&quot;authentication&quot;&gt;Authentication&lt;/h2&gt;

&lt;p&gt;A bit of clicking around in Hetzner’s screens leads to the API
key tool where a bearer token string can be generated.
For direct API use, which I tried to make sure it was right
it is a standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorization: bearer &amp;lt;token&amp;gt;&lt;/code&gt; http header.
I wrote the plain token to a file, which is useful later.&lt;/p&gt;

&lt;h1 id=&quot;the-stack&quot;&gt;The Stack&lt;/h1&gt;

&lt;p&gt;Install the hcloud/provider and add the provider to your main.ts:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const provider = new HcloudProvider(this, &quot;hetzner&quot;, {
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Don’t put your token into the provider, it will end up in the cdk.out files
and depending on how you store them may pose a security issue.&lt;/p&gt;

&lt;p&gt;Instead, when you run cdktf, do something like:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HCLOUD_TOKEN=$(&amp;lt;token ) cdktf diff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hetzner is organized by datacenters&lt;/p&gt;

&lt;h2 id=&quot;ssh-keys&quot;&gt;SSH Keys&lt;/h2&gt;
&lt;p&gt;Injecting ssh keys into servers requires creating SshKey resources:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const sshPublicKeys = [
      [
	    &quot;danj&quot;,
        &quot;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKw9W05dLNGIH1jM9ceezvbLx/I2nTAeP3ZIU4Hsm+o9 danj&quot;
	  ]
    ];

    sshPublicKeys.map(([name,key],idx) =&amp;gt; new SshKey(this, `ssh-${idx}`, {
      name,
      publicKey: key
    }));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;firewall&quot;&gt;Firewall&lt;/h2&gt;
&lt;p&gt;You probably want one of them&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    new Firewall(this, &quot;firewall&quot;, {
      name: &quot;stack-fw&quot;,
      rule: [
	{
	  description: &quot;ssh from office&quot;,
	  direction: &quot;in&quot;,
	  protocol: &quot;tcp&quot;,
	  port: &quot;22&quot;,
	  sourceIps
	},
	{
	  description: &quot;icmp from office&quot;,
	  direction: &quot;in&quot;,
	  protocol: &quot;icmp&quot;,
	  sourceIps
	}
      ],
      applyTo: [
        { labelSelector: &quot;office-only&quot; },
      ]
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The applyTo-&amp;gt;labelSelector creates a forward association with
servers that you want to tie to this firewall, as servers come up
if the labelSelector matches it will adopt this firewall.&lt;/p&gt;

&lt;h2 id=&quot;userdata&quot;&gt;userData&lt;/h2&gt;
&lt;p&gt;Update and install some software while the server comes up with
cloud-init. The first line has to be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#!&lt;/code&gt; or the data will
not be given the right mime-type and won’t run.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    const userData = [
      &quot;#!/bin/bash&quot;,
      &quot;export NEEDRESTART_MODE=a&quot;,
      &quot;apt -y update&quot;,
      &quot;apt -y upgrade&quot;,
      &quot;apt -y install docker.io docker-compose docker-buildx&quot;,
    ].join(&quot;\n&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;server&quot;&gt;Server&lt;/h2&gt;
&lt;p&gt;The labels need to match the firewall selector, but the docs
are not clear on if the match is by key or value. sshKeys
are by name of the resource. I tried to do only IPv6, but
my network isn’t properly configured for it, so that’s a
battle for later.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    const server = new Server(this, &quot;server&quot;, {
      provider,
      labels: { &quot;office-only&quot;: &quot;office-only&quot; },
      backups: false,
      datacenter,
      name: &quot;office-services&quot;,
      image: &quot;ubuntu-22.04&quot;,
      serverType: &quot;cpx11&quot;,
      userData,
      sshKeys: [&quot;danj&quot;],
      publicNet: [
	    {
	      ipv4Enabled: true,
	      ipv6Enabled: true
  	    }
      ]
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;volume&quot;&gt;Volume&lt;/h2&gt;
&lt;p&gt;For a bit of storage, a direct attach block store volume.
The size is in GiB, deletionProtection set to true will
prevent cdktf destroy from completing, it does work.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    new Volume(this, &quot;office-data&quot;, {
      name: &quot;office-data&quot;,
      size: 10,
      automount: true,
      format: &quot;xfs&quot;,
      deleteProtection: true,
      serverId: Fn.tonumber(server.id),
    });

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;important&lt;/strong&gt; takeaway is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fn.tonumber&lt;/code&gt;. It took quite
a while to find any hint about how to use/refer to a materialized id
that also is not the right type.
Using TS to convert the value doesn’t work because it is too soon.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fn.tonumber&lt;/code&gt; is getting passed as a function into materialization.&lt;/p&gt;

&lt;p&gt;I’d not seen this in AWS since ids are all strings. But for Hetzner the
serverId parameter for Volume is a number but the type of server.id is a string.&lt;/p&gt;

&lt;p&gt;The Volume, with automount: true, is mounted on start up, although the
exact moment (before or after cloud-init runs user-data) is unknown to me.
The default mount is like /mnt/HC_Volume_100314108&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;p&gt;https://registry.terraform.io/providers/hetznercloud/hcloud/latest/docs&lt;/p&gt;

&lt;p&gt;https://developer.hashicorp.com/terraform/language/functions&lt;/p&gt;

&lt;p&gt;https://developer.hashicorp.com/terraform/cdktf&lt;/p&gt;</content><author><name>Dan Janowski</name></author><category term="infrastructure" /><category term="cdk" /><category term="hetzner" /><summary type="html">Having a small project to deploy at Hetzner, I decided to try using CDK for the first time outside of AWS. Hashicorp’s CDKTF rolls AWS CDK with Terraform for doing IAC with the many TF providers available.</summary></entry><entry><title type="html">Publishing Jetenv to HEX</title><link href="https://danj3.github.io/2024/01/announcing-jetenv/" rel="alternate" type="text/html" title="Publishing Jetenv to HEX" /><published>2024-01-19T10:00:00-05:00</published><updated>2024-01-19T10:00:00-05:00</updated><id>https://danj3.github.io/2024/01/announcing-jetenv</id><content type="html" xml:base="https://danj3.github.io/2024/01/announcing-jetenv/">&lt;p&gt;Announcing that today a new package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jetenv&lt;/code&gt; will be published to &lt;a href=&quot;https://hex.pm/jetenv&quot;&gt;hex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This package offers a new approach to application configuration that moves all runtime configuration and secrets to the environment. This changes approaches for deployment of containers, especially with any orchestration system.&lt;/p&gt;

&lt;p&gt;Your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime.exs&lt;/code&gt; can look just like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Jetenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Dan Janowski</name></author><category term="elixir" /><category term="hex" /><category term="jetenv" /><category term="elixir" /><summary type="html">Announcing that today a new package Jetenv will be published to hex.</summary></entry><entry><title type="html">Emacs: mini-buffer input that conflicts with completion</title><link href="https://danj3.github.io/2023/12/emacs-mini-buffer-input-that-conflicts-with-completion/" rel="alternate" type="text/html" title="Emacs: mini-buffer input that conflicts with completion" /><published>2023-12-31T20:08:33-05:00</published><updated>2023-12-31T20:08:33-05:00</updated><id>https://danj3.github.io/2023/12/emacs-mini-buffer-input-that-conflicts-with-completion</id><content type="html" xml:base="https://danj3.github.io/2023/12/emacs-mini-buffer-input-that-conflicts-with-completion/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In Emacs 29 with &lt;code&gt;company-mode&lt;/code&gt;, I have gotten stuck using &lt;code&gt;find-file&lt;/code&gt; in the mini-buffer when creating a new file in that completion only offers what exists and &lt;code&gt;C-g &lt;/code&gt;quits find-file, &lt;code&gt;&amp;lt;return&gt;&lt;/code&gt; will replace input with the selected/default completion. The answer is simple, but not documented anywhere I could find, &lt;code&gt;vertico-exit-input&lt;/code&gt; !&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;I&apos;ve been reinventing my emacs configuration with Emacs 29 and replacing/adding features. One of them is &lt;code&gt;company-mode&lt;/code&gt;, which is complete-anything (anywhere or everywhere), which works remarkable well. Except for one scenario, opening a &lt;strong&gt;new&lt;/strong&gt; file. After &lt;code&gt;C-x C-f&lt;/code&gt;, in the mini-buffer with &quot;Find file&quot; mode, &lt;code&gt;company-mode&lt;/code&gt; offers completions for what exists. When typing a name that does not exist the mode does its best to match something/anything. At this point there is a default completion so pressing &lt;code&gt;RET&lt;/code&gt; will drop the input and send the completion. Pressing &lt;code&gt;C-g&lt;/code&gt; (the way to do &lt;code&gt;company-abort&lt;/code&gt; elsewhere), aborts &lt;code&gt;find-file&lt;/code&gt;. After various attempts of adding to a keymap (see my useless attempts below), none of which worked, while &lt;code&gt;find-file&lt;/code&gt; was active I did &lt;code&gt;C-h b&lt;/code&gt; which lists all the bindings in effect. I found that &lt;code&gt;vertico-exit-input&lt;/code&gt; was bound to &lt;code&gt;M-RET&lt;/code&gt;. No knowing what that function actually does, I tried the key and it did pass my input to find-file.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;What is &lt;code&gt;vertico-exit-input&lt;/code&gt; you may ask, as I did? Help says:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;vertico-exit-input is an interactive byte-compiled Lisp function in
‘vertico.el’.

(vertico-exit-input)

Exit minibuffer with input.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;and that describes what I wanted. Another case of not knowing how to ask the question to get the answer.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;These bindings did nothing of use, but may be useful for something else:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;(keymap-set company-active-map &quot;C-M-g&quot; &apos;company-abort)
(keymap-set company-mode-map &quot;C-M-g&quot; &apos;company-abort)
(keymap-set company-mode-map &quot;C-&amp;lt;return&gt;&quot; &apos;company-abort)
(keymap-set company-active-map &quot;C-&amp;lt;return&gt;&quot; &apos;company-abort)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="Emacs" /><category term="emacs" /><category term="company-mode" /><category term="completion" /><summary type="html">In Emacs, using input that conflicts with completion choices</summary></entry><entry><title type="html">Why HMAC</title><link href="https://danj3.github.io/2021/03/why-hmac/" rel="alternate" type="text/html" title="Why HMAC" /><published>2021-03-30T11:28:14-04:00</published><updated>2021-03-30T11:28:14-04:00</updated><id>https://danj3.github.io/2021/03/why-hmac</id><content type="html" xml:base="https://danj3.github.io/2021/03/why-hmac/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Need to generate a constant hash key from an ID, or compound ID, but don&apos;t want it to be too easy for a 3rd party to brute force generate (assuming they know the ID domain and in a compound the right ordering, and other transformations)?
&lt;!--more--&gt;
You may be tempted to add a secret string to the key and run it through SHA-256. But this is what HMAC is for and it addresses a specific problem with using just a SHA: &lt;a href=&quot;https://en.wikipedia.org/wiki/Length_extension_attack&quot;&gt;length extension attacks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/HMAC&quot;&gt;wikipedia page on HMAC&lt;/a&gt; does the topic justice. The synopsis is that simply concatenating (key || message) or (message || key ) or even (key1 || message || key2 ) all have weaknesses. More to the point, there&apos;s no need to consider that approach because HMAC does this job without those problems. A key security point:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:quote --&gt;&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;The cryptographic strength of the HMAC depends upon the size of the secret key that is used. The most common attack against HMACs is brute force to uncover the secret key. HMACs are substantially less affected by collisions than their underlying hashing algorithms alone.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;https://en.wikipedia.org/wiki/HMAC#cite_note-8&lt;/cite&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- /wp:quote --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading --&gt;&lt;/p&gt;
&lt;h2&gt;How to generate&lt;/h2&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;A simple example using openssl:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:syntaxhighlighter/code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;% openssl dgst -sha256 -hmac &quot;my key&quot;
foobar
4e77e850fea2bcb0ddf3681d2a0d79cfb7373f4a36b0c5fd7f754d7853f74946&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:syntaxhighlighter/code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This is not a good key! As the above citation indicates, brute force attacks become impractical with long keys. openssl has PBKDF2 built in for some utilities, but not a way to generate a password only. The enc module purports to have such a feature (-P) but I&apos;ve been unable to obtain that result.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="Uncategorized" /><category term="crypto" /><summary type="html">Need to generate a constant hash key from an ID, or compound ID, but don&apos;t want it to be too easy for a 3rd party to brute force generate (assuming they know the ID domain and in a compound the right ordering, and other transformations)?</summary></entry><entry><title type="html">NixOS PXE install</title><link href="https://danj3.github.io/2021/03/nixos-pxe-install/" rel="alternate" type="text/html" title="NixOS PXE install" /><published>2021-03-30T10:41:50-04:00</published><updated>2021-03-30T10:41:50-04:00</updated><id>https://danj3.github.io/2021/03/nixos-pxe-install</id><content type="html" xml:base="https://danj3.github.io/2021/03/nixos-pxe-install/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;I was interested in trying out nixOS and in my environment I already have a pxe infrastructure and wanted to use that. However, the distribution does not seem to include the required features. This is inferred in the &lt;a href=&quot;https://nixos.org/manual/nixos/stable/#sec-booting-from-pxe&quot;&gt;documentation here&lt;/a&gt; by stating a nix-build is required to get the needed artifacts. What&apos;s odd is that the &lt;code&gt;isolinux&lt;/code&gt; directory on the ISO includes all the necessary PXE support.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;I&apos;m abandoning this for now.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="linux" /><category term="nixos" /><category term="linux" /><summary type="html">A stab at installing NixOS over a network</summary></entry><entry><title type="html">Signed OpenSSH keys</title><link href="https://danj3.github.io/2021/03/signed-openssh-keys/" rel="alternate" type="text/html" title="Signed OpenSSH keys" /><published>2021-03-26T11:47:23-04:00</published><updated>2021-03-26T11:47:23-04:00</updated><id>https://danj3.github.io/2021/03/signed-openssh-keys</id><content type="html" xml:base="https://danj3.github.io/2021/03/signed-openssh-keys/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;OpenSSH supports the signing of public keys by a certificate authority. This feature is the gateway to a powerful set of access controls limiting access by users, time, principals and hosts. Articles can be found  on the topic, here are a few:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:more --&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
&lt;!-- /wp:more --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Facebook engineering wrote in 2016 about their approach and what it enables: &lt;a href=&quot;https://engineering.fb.com/2016/09/12/security/scalable-and-secure-access-with-ssh/&quot;&gt;Scalable and secure access with SSH&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Hosaka wrote about it in 2020 and makes reference to the above FB post in the article &lt;a href=&quot;https://hosakacorp.net/p/ssh-pki.html&quot;&gt;Creating a PKI for OpenSSH&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The key entry point is in the &lt;code&gt;ssh-keygen&lt;/code&gt; man page:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CERT&lt;/strong&gt;&lt;strong&gt;IFICATES&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;ssh-keygen&lt;/strong&gt; supports signing of keys to produce certificates that may be used for user or host authentication.  Certificates consist of a public key, some identity information, zero or more principal (user or host) names and a set of options that are signed by a Certification Authority (CA) key.  Clients or servers may then trust only the CA key and verify its signature on a certificate rather than trusting many user/host keys.  Note that OpenSSH certificates are a different, and much simpler, format to the X.509 certificates used in ssl(8).&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Some points of interest:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users do not need to pre-seed .ssh/authorized_keys if their pub key is signed by a trusted CA&lt;/li&gt;
&lt;li&gt;Keys can be revoked. Although the mechanics of this are left to the SA&apos;s devices&lt;/li&gt;
&lt;li&gt;A signed key can be limited in usable scope to specific set of hosts and specific sets of destination users&lt;/li&gt;
&lt;li&gt;A signed key has a specific usable duration, i.e. it expires. This alone adds a great deal of security and requires interaction with the CA for issuance/renewal creating a point of control.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Some details on how to do this are left out. How to create a secure issuance mechanism for a CA to do its actual work. The FB post alludes to an process that is invoked automatically for a user when the log in to a bastion host, but leaves the details of that out. The key-revocation mechanism is probably dependent on some kind of cron mechanism. How to manage (what gets issued) the who has access to what is out of scope and is likely dependent upon LDAP or other identity/authentication system of control.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;These are great starting points on this topic and worth considering if not for the possibilities it offers if not for how to solve the few implementation issues to make it really work.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="System Admin" /><category term="Cryptography" /><category term="openssl" /><category term="ssh" /><summary type="html">Background and references on signed ssh keys</summary></entry><entry><title type="html">RSA Crypto for JS and Elixir</title><link href="https://danj3.github.io/2021/03/rsa-crypto-for-js-and-elixir/" rel="alternate" type="text/html" title="RSA Crypto for JS and Elixir" /><published>2021-03-26T11:00:06-04:00</published><updated>2021-03-26T11:00:06-04:00</updated><id>https://danj3.github.io/2021/03/rsa-crypto-for-js-and-elixir</id><content type="html" xml:base="https://danj3.github.io/2021/03/rsa-crypto-for-js-and-elixir/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Modern browsers have real crypto built in the class SubtleCrypto, to quote the MDN page:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:quote --&gt;&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;The &lt;code&gt;&lt;strong&gt;SubtleCrypto&lt;/strong&gt;&lt;/code&gt; interface of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API&quot;&gt;Web Crypto API&lt;/a&gt; provides a number of low-level cryptographic functions. Access to the features of &lt;code&gt;SubtleCrypto&lt;/code&gt; is obtained through the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Crypto/subtle&quot;&gt;&lt;code&gt;subtle&lt;/code&gt;&lt;/a&gt; property of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Crypto&quot;&gt;&lt;code&gt;Crypto&lt;/code&gt;&lt;/a&gt; object you get from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto&quot;&gt;&lt;code&gt;Window.crypto&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- /wp:quote --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:more --&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
&lt;!-- /wp:more --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;An example of how to do public key encryption in Javascript using SubtleCrypto:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;A Practical Guide to the Web Cryptography API (opens in a new tab)&quot; href=&quot;https://voracious.dev/a-practical-guide-to-the-web-cryptography-api&quot; target=&quot;_blank&quot;&gt;A Practical Guide to the Web Cryptography API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot;&gt;Mozilla Documentation for SubtleCrypto&lt;/a&gt; and examples on &lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/web-crypto&quot;&gt;mdn github&lt;/a&gt;. There are links in the reference documentation to running examples on the mdn github.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The trick in using this is handling encrypted payloads outside of JS with the same parameters. The use case I&apos;m interested in is encryption using a public key in JS and decryption with the private key in Elixir. On the JS side, the parameters are:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:syntaxhighlighter/code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;return await window.crypto.subtle.importKey(
      &quot;spki&quot;,
      binaryDer,
      {
        name: &quot;RSA-OAEP&quot;,
        hash: &quot;SHA-256&quot;
      },
      true,
      [&quot;encrypt&quot;]
    );&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:syntaxhighlighter/code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The trouble is that RSA-OAEP with SHA-256 support on the openssl side is not available in recent older versions of openssl and while I&apos;ve been able to use the &lt;code&gt;openssl&lt;/code&gt; command to do this successfully at one point with some version, I gave up on this approach to testing the process due to poor documentation.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;However, doing this in Elixir with a recent openssl library and the &lt;a href=&quot;http://erlang.org/doc/man/public_key.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot;erlang public_key (opens in a new tab)&quot;&gt;erlang public_key&lt;/a&gt; module is not too difficult and looks like this:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;Base.decode64!(input, padding: false )
|&gt; :public_key.decrypt_private( 
 key,
 rsa_padding: :rsa_pkcs1_oaep_padding,
 rsa_oaep_md: :sha256 )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="Cryptography" /><category term="elixir" /><category term="javascript" /><summary type="html">Encryption between JS and Elixir</summary></entry><entry><title type="html">nginx config for acme challenge</title><link href="https://danj3.github.io/2021/02/nginx-config-for-acme-challenge/" rel="alternate" type="text/html" title="nginx config for acme challenge" /><published>2021-02-10T15:14:44-05:00</published><updated>2021-02-10T15:14:44-05:00</updated><id>https://danj3.github.io/2021/02/nginx-config-for-acme-challenge</id><content type="html" xml:base="https://danj3.github.io/2021/02/nginx-config-for-acme-challenge/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;To more transparently support Let&apos;s Encrypt and the acme-challenge for http, here is a config that can be used with nginx. In the case all traffic showing up as HTTP gets redirected to HTTPS, it&apos;s easiest to respond to challenges without the redirect.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:more --&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
&lt;!-- /wp:more --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;server {
        server_name www.yes-www.org yes-www.org www.yes-www.com yes-www.com;

        listen &amp;#91;::]:80;
        listen 80;

        location /.well-known/acme-challenge/ {
            root /var/www;
            try_files $uri =404;
        }

        access_log off;

        return 301 https://$host$request_uri;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This appeared on &lt;a href=&quot;https://serverfault.com/questions/924251/stopping-nginx-to-3021-redirect-for-well-known-location&quot;&gt;serverfault&lt;/a&gt; literally as above. I modified it slightly to strip the initial path part of the URL off with a rewrite, change the location part of above to this:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;    location /.well-known/acme-challenge {
      root /acme-challenge;
      rewrite ^/.well-known/acme-challenge/(.*) /$1 break;
      try_files $uri =404;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Then the challenges will end up in the /acme-challenge directory without a substructure (.well-known/acme-challenge), so when configuring &lt;code&gt;dehydrated&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;WELLKNOWN=/acme-challenge&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;My usual mode of testing this kind of config is to &lt;code&gt;echo hello &gt; /acme-challenge/foo.txt&lt;/code&gt; and then use &lt;code&gt;curl http://domain.io/.well-known/acme-challenge/foo.txt&lt;/code&gt; and if you see &lt;code&gt;hello&lt;/code&gt; then you should be good to go.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="Uncategorized" /><category term="nginx" /><category term="acme certificates" /><summary type="html">To more transparently support Let&apos;s Encrypt and the acme-challenge for http, here is a config that can be used with nginx. In the case all traffic showing up as HTTP gets redirected to HTTPS, it&apos;s easiest to respond to challenges without the redirect.</summary></entry></feed>