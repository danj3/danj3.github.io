<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4005/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4005/" rel="alternate" type="text/html" /><updated>2024-01-20T09:05:54-05:00</updated><id>http://localhost:4005/feed.xml</id><title type="html">A diary of problems</title><subtitle>Dan&apos;s technology blog for development, systems, elixir, authentication, keycloak, ldap, kerberos, linux</subtitle><entry><title type="html">Publishing Jetenv to HEX</title><link href="http://localhost:4005/2024/01/announcing-jetenv/" rel="alternate" type="text/html" title="Publishing Jetenv to HEX" /><published>2024-01-19T10:00:00-05:00</published><updated>2024-01-19T10:00:00-05:00</updated><id>http://localhost:4005/2024/01/announcing-jetenv</id><content type="html" xml:base="http://localhost:4005/2024/01/announcing-jetenv/">&lt;p&gt;Announcing that today a new package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jetenv&lt;/code&gt; will be published to &lt;a href=&quot;https://hex.pm/jetenv&quot;&gt;hex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This package offers a new approach to application configuration that moves all runtime configuration and secrets to the environment. This changes approaches for deployment of containers, especially with any orchestration system.&lt;/p&gt;

&lt;p&gt;Your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime.exs&lt;/code&gt; can look just like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Jetenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="elixir" /><category term="hex" /><category term="jetenv" /><summary type="html">Announcing that today a new package Jetenv will be published to hex.</summary></entry><entry><title type="html">Emacs: mini-buffer input that conflicts with completion</title><link href="http://localhost:4005/2023/12/emacs-mini-buffer-input-that-conflicts-with-completion/" rel="alternate" type="text/html" title="Emacs: mini-buffer input that conflicts with completion" /><published>2023-12-31T20:08:33-05:00</published><updated>2023-12-31T20:08:33-05:00</updated><id>http://localhost:4005/2023/12/emacs-mini-buffer-input-that-conflicts-with-completion</id><content type="html" xml:base="http://localhost:4005/2023/12/emacs-mini-buffer-input-that-conflicts-with-completion/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In Emacs 29 with &lt;code&gt;company-mode&lt;/code&gt;, I have gotten stuck using &lt;code&gt;find-file&lt;/code&gt; in the mini-buffer when creating a new file in that completion only offers what exists and &lt;code&gt;C-g &lt;/code&gt;quits find-file, &lt;code&gt;&amp;lt;return&gt;&lt;/code&gt; will replace input with the selected/default completion. The answer is simple, but not documented anywhere I could find, &lt;code&gt;vertico-exit-input&lt;/code&gt; !&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;I&apos;ve been reinventing my emacs configuration with Emacs 29 and replacing/adding features. One of them is &lt;code&gt;company-mode&lt;/code&gt;, which is complete-anything (anywhere or everywhere), which works remarkable well. Except for one scenario, opening a &lt;strong&gt;new&lt;/strong&gt; file. After &lt;code&gt;C-x C-f&lt;/code&gt;, in the mini-buffer with &quot;Find file&quot; mode, &lt;code&gt;company-mode&lt;/code&gt; offers completions for what exists. When typing a name that does not exist the mode does its best to match something/anything. At this point there is a default completion so pressing &lt;code&gt;RET&lt;/code&gt; will drop the input and send the completion. Pressing &lt;code&gt;C-g&lt;/code&gt; (the way to do &lt;code&gt;company-abort&lt;/code&gt; elsewhere), aborts &lt;code&gt;find-file&lt;/code&gt;. After various attempts of adding to a keymap (see my useless attempts below), none of which worked, while &lt;code&gt;find-file&lt;/code&gt; was active I did &lt;code&gt;C-h b&lt;/code&gt; which lists all the bindings in effect. I found that &lt;code&gt;vertico-exit-input&lt;/code&gt; was bound to &lt;code&gt;M-RET&lt;/code&gt;. No knowing what that function actually does, I tried the key and it did pass my input to find-file.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;What is &lt;code&gt;vertico-exit-input&lt;/code&gt; you may ask, as I did? Help says:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;vertico-exit-input is an interactive byte-compiled Lisp function in
‘vertico.el’.

(vertico-exit-input)

Exit minibuffer with input.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;and that describes what I wanted. Another case of not knowing how to ask the question to get the answer.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;These bindings did nothing of use, but may be useful for something else:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;(keymap-set company-active-map &quot;C-M-g&quot; &apos;company-abort)
(keymap-set company-mode-map &quot;C-M-g&quot; &apos;company-abort)
(keymap-set company-mode-map &quot;C-&amp;lt;return&gt;&quot; &apos;company-abort)
(keymap-set company-active-map &quot;C-&amp;lt;return&gt;&quot; &apos;company-abort)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="Emacs" /><category term="emacs" /><category term="company-mode" /><category term="completion" /><summary type="html">In Emacs, using input that conflicts with completion choices</summary></entry><entry><title type="html">Why HMAC</title><link href="http://localhost:4005/2021/03/why-hmac/" rel="alternate" type="text/html" title="Why HMAC" /><published>2021-03-30T11:28:14-04:00</published><updated>2021-03-30T11:28:14-04:00</updated><id>http://localhost:4005/2021/03/why-hmac</id><content type="html" xml:base="http://localhost:4005/2021/03/why-hmac/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Need to generate a constant hash key from an ID, or compound ID, but don&apos;t want it to be too easy for a 3rd party to brute force generate (assuming they know the ID domain and in a compound the right ordering, and other transformations)? You may be tempted to add a secret string to the key and run it through SHA-256. But this is what HMAC is for and it addresses a specific problem with using just a SHA: &lt;a href=&quot;https://en.wikipedia.org/wiki/Length_extension_attack&quot;&gt;length extension attacks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/HMAC&quot;&gt;wikipedia page on HMAC&lt;/a&gt; does the topic justice. The synopsis is that simply concatenating (key || message) or (message || key ) or even (key1 || message || key2 ) all have weaknesses. More to the point, there&apos;s no need to consider that approach because HMAC does this job without those problems. A key security point:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:quote --&gt;&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;The cryptographic strength of the HMAC depends upon the size of the secret key that is used. The most common attack against HMACs is brute force to uncover the secret key. HMACs are substantially less affected by collisions than their underlying hashing algorithms alone.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;https://en.wikipedia.org/wiki/HMAC#cite_note-8&lt;/cite&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- /wp:quote --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading --&gt;&lt;/p&gt;
&lt;h2&gt;How to generate&lt;/h2&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;A simple example using openssl:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:syntaxhighlighter/code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;% openssl dgst -sha256 -hmac &quot;my key&quot;
foobar
4e77e850fea2bcb0ddf3681d2a0d79cfb7373f4a36b0c5fd7f754d7853f74946&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:syntaxhighlighter/code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This is not a good key! As the above citation indicates, brute force attacks become impractical with long keys. openssl has PBKDF2 built in for some utilities, but not a way to generate a password only. The enc module purports to have such a feature (-P) but I&apos;ve been unable to obtain that result.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="Uncategorized" /><summary type="html">Need to generate a constant hash key from an ID, or compound ID, but don&apos;t want it to be too easy for a 3rd party to brute force generate (assuming they know the ID domain and in a compound the right ordering, and other transformations)? You may be tempted to add a secret string to the key and run it through SHA-256. But this is what HMAC is for and it addresses a specific problem with using just a SHA: length extension attacks. The wikipedia page on HMAC does the topic justice. The synopsis is that simply concatenating (key || message) or (message || key ) or even (key1 || message || key2 ) all have weaknesses. More to the point, there&apos;s no need to consider that approach because HMAC does this job without those problems. A key security point: The cryptographic strength of the HMAC depends upon the size of the secret key that is used. The most common attack against HMACs is brute force to uncover the secret key. HMACs are substantially less affected by collisions than their underlying hashing algorithms alone. https://en.wikipedia.org/wiki/HMAC#cite_note-8 How to generate A simple example using openssl: % openssl dgst -sha256 -hmac &quot;my key&quot; foobar 4e77e850fea2bcb0ddf3681d2a0d79cfb7373f4a36b0c5fd7f754d7853f74946 This is not a good key! As the above citation indicates, brute force attacks become impractical with long keys. openssl has PBKDF2 built in for some utilities, but not a way to generate a password only. The enc module purports to have such a feature (-P) but I&apos;ve been unable to obtain that result.</summary></entry><entry><title type="html">NixOS PXE install</title><link href="http://localhost:4005/2021/03/nixos-pxe-install/" rel="alternate" type="text/html" title="NixOS PXE install" /><published>2021-03-30T10:41:50-04:00</published><updated>2021-03-30T10:41:50-04:00</updated><id>http://localhost:4005/2021/03/nixos-pxe-install</id><content type="html" xml:base="http://localhost:4005/2021/03/nixos-pxe-install/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;I was interested in trying out nixOS and in my environment I already have a pxe infrastructure and wanted to use that. However, the distribution does not seem to include the required features. This is inferred in the &lt;a href=&quot;https://nixos.org/manual/nixos/stable/#sec-booting-from-pxe&quot;&gt;documentation here&lt;/a&gt; by stating a nix-build is required to get the needed artifacts. What&apos;s odd is that the &lt;code&gt;isolinux&lt;/code&gt; directory on the ISO includes all the necessary PXE support.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;I&apos;m abandoning this for now.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="linux" /><summary type="html">I was interested in trying out nixOS and in my environment I already have a pxe infrastructure and wanted to use that. However, the distribution does not seem to include the required features. This is inferred in the documentation here by stating a nix-build is required to get the needed artifacts. What&apos;s odd is that the isolinux directory on the ISO includes all the necessary PXE support. I&apos;m abandoning this for now.</summary></entry><entry><title type="html">Signed OpenSSH keys</title><link href="http://localhost:4005/2021/03/signed-openssh-keys/" rel="alternate" type="text/html" title="Signed OpenSSH keys" /><published>2021-03-26T11:47:23-04:00</published><updated>2021-03-26T11:47:23-04:00</updated><id>http://localhost:4005/2021/03/signed-openssh-keys</id><content type="html" xml:base="http://localhost:4005/2021/03/signed-openssh-keys/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;OpenSSH supports the signing of public keys by a certificate authority. This feature is the gateway to a powerful set of access controls limiting access by users, time, principals and hosts. Articles can be found  on the topic, here are a few:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:more --&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
&lt;!-- /wp:more --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Facebook engineering wrote in 2016 about their approach and what it enables: &lt;a href=&quot;https://engineering.fb.com/2016/09/12/security/scalable-and-secure-access-with-ssh/&quot;&gt;Scalable and secure access with SSH&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Hosaka wrote about it in 2020 and makes reference to the above FB post in the article &lt;a href=&quot;https://hosakacorp.net/p/ssh-pki.html&quot;&gt;Creating a PKI for OpenSSH&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The key entry point is in the &lt;code&gt;ssh-keygen&lt;/code&gt; man page:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CERT&lt;/strong&gt;&lt;strong&gt;IFICATES&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;ssh-keygen&lt;/strong&gt; supports signing of keys to produce certificates that may be used for user or host authentication.  Certificates consist of a public key, some identity information, zero or more principal (user or host) names and a set of options that are signed by a Certification Authority (CA) key.  Clients or servers may then trust only the CA key and verify its signature on a certificate rather than trusting many user/host keys.  Note that OpenSSH certificates are a different, and much simpler, format to the X.509 certificates used in ssl(8).&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Some points of interest:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users do not need to pre-seed .ssh/authorized_keys if their pub key is signed by a trusted CA&lt;/li&gt;
&lt;li&gt;Keys can be revoked. Although the mechanics of this are left to the SA&apos;s devices&lt;/li&gt;
&lt;li&gt;A signed key can be limited in usable scope to specific set of hosts and specific sets of destination users&lt;/li&gt;
&lt;li&gt;A signed key has a specific usable duration, i.e. it expires. This alone adds a great deal of security and requires interaction with the CA for issuance/renewal creating a point of control.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Some details on how to do this are left out. How to create a secure issuance mechanism for a CA to do its actual work. The FB post alludes to an process that is invoked automatically for a user when the log in to a bastion host, but leaves the details of that out. The key-revocation mechanism is probably dependent on some kind of cron mechanism. How to manage (what gets issued) the who has access to what is out of scope and is likely dependent upon LDAP or other identity/authentication system of control.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;These are great starting points on this topic and worth considering if not for the possibilities it offers if not for how to solve the few implementation issues to make it really work.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="System Admin" /><category term="Cryptography" /><category term="openssl" /><category term="ssh" /><summary type="html">OpenSSH supports the signing of public keys by a certificate authority. This feature is the gateway to a powerful set of access controls limiting access by users, time, principals and hosts. Articles can be found on the topic, here are a few: Facebook engineering wrote in 2016 about their approach and what it enables: Scalable and secure access with SSH Hosaka wrote about it in 2020 and makes reference to the above FB post in the article Creating a PKI for OpenSSH. The key entry point is in the ssh-keygen man page: CERTIFICATES      ssh-keygen supports signing of keys to produce certificates that may be used for user or host authentication.  Certificates consist of a public key, some identity information, zero or more principal (user or host) names and a set of options that are signed by a Certification Authority (CA) key.  Clients or servers may then trust only the CA key and verify its signature on a certificate rather than trusting many user/host keys.  Note that OpenSSH certificates are a different, and much simpler, format to the X.509 certificates used in ssl(8). Some points of interest: Users do not need to pre-seed .ssh/authorized_keys if their pub key is signed by a trusted CA Keys can be revoked. Although the mechanics of this are left to the SA&apos;s devices A signed key can be limited in usable scope to specific set of hosts and specific sets of destination users A signed key has a specific usable duration, i.e. it expires. This alone adds a great deal of security and requires interaction with the CA for issuance/renewal creating a point of control. Some details on how to do this are left out. How to create a secure issuance mechanism for a CA to do its actual work. The FB post alludes to an process that is invoked automatically for a user when the log in to a bastion host, but leaves the details of that out. The key-revocation mechanism is probably dependent on some kind of cron mechanism. How to manage (what gets issued) the who has access to what is out of scope and is likely dependent upon LDAP or other identity/authentication system of control. These are great starting points on this topic and worth considering if not for the possibilities it offers if not for how to solve the few implementation issues to make it really work.</summary></entry><entry><title type="html">RSA Crypto for JS and Elixir</title><link href="http://localhost:4005/2021/03/rsa-crypto-for-js-and-elixir/" rel="alternate" type="text/html" title="RSA Crypto for JS and Elixir" /><published>2021-03-26T11:00:06-04:00</published><updated>2021-03-26T11:00:06-04:00</updated><id>http://localhost:4005/2021/03/rsa-crypto-for-js-and-elixir</id><content type="html" xml:base="http://localhost:4005/2021/03/rsa-crypto-for-js-and-elixir/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Modern browsers have real crypto built in the class SubtleCrypto, to quote the MDN page:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:quote --&gt;&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;The &lt;code&gt;&lt;strong&gt;SubtleCrypto&lt;/strong&gt;&lt;/code&gt; interface of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API&quot;&gt;Web Crypto API&lt;/a&gt; provides a number of low-level cryptographic functions. Access to the features of &lt;code&gt;SubtleCrypto&lt;/code&gt; is obtained through the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Crypto/subtle&quot;&gt;&lt;code&gt;subtle&lt;/code&gt;&lt;/a&gt; property of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Crypto&quot;&gt;&lt;code&gt;Crypto&lt;/code&gt;&lt;/a&gt; object you get from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto&quot;&gt;&lt;code&gt;Window.crypto&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- /wp:quote --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:more --&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
&lt;!-- /wp:more --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;An example of how to do public key encryption in Javascript using SubtleCrypto:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;A Practical Guide to the Web Cryptography API (opens in a new tab)&quot; href=&quot;https://voracious.dev/a-practical-guide-to-the-web-cryptography-api&quot; target=&quot;_blank&quot;&gt;A Practical Guide to the Web Cryptography API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot;&gt;Mozilla Documentation for SubtleCrypto&lt;/a&gt; and examples on &lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/web-crypto&quot;&gt;mdn github&lt;/a&gt;. There are links in the reference documentation to running examples on the mdn github.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The trick in using this is handling encrypted payloads outside of JS with the same parameters. The use case I&apos;m interested in is encryption using a public key in JS and decryption with the private key in Elixir. On the JS side, the parameters are:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:syntaxhighlighter/code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-syntaxhighlighter-code&quot;&gt;return await window.crypto.subtle.importKey(
      &quot;spki&quot;,
      binaryDer,
      {
        name: &quot;RSA-OAEP&quot;,
        hash: &quot;SHA-256&quot;
      },
      true,
      [&quot;encrypt&quot;]
    );&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:syntaxhighlighter/code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The trouble is that RSA-OAEP with SHA-256 support on the openssl side is not available in recent older versions of openssl and while I&apos;ve been able to use the &lt;code&gt;openssl&lt;/code&gt; command to do this successfully at one point with some version, I gave up on this approach to testing the process due to poor documentation.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;However, doing this in Elixir with a recent openssl library and the &lt;a href=&quot;http://erlang.org/doc/man/public_key.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot;erlang public_key (opens in a new tab)&quot;&gt;erlang public_key&lt;/a&gt; module is not too difficult and looks like this:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;Base.decode64!(input, padding: false )
|&gt; :public_key.decrypt_private( 
 key,
 rsa_padding: :rsa_pkcs1_oaep_padding,
 rsa_oaep_md: :sha256 )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="Cryptography" /><category term="elixir" /><summary type="html">Modern browsers have real crypto built in the class SubtleCrypto, to quote the MDN page: The SubtleCrypto interface of the Web Crypto API provides a number of low-level cryptographic functions. Access to the features of SubtleCrypto is obtained through the subtle property of the Crypto object you get from Window.crypto. An example of how to do public key encryption in Javascript using SubtleCrypto: A Practical Guide to the Web Cryptography API Mozilla Documentation for SubtleCrypto and examples on mdn github. There are links in the reference documentation to running examples on the mdn github. The trick in using this is handling encrypted payloads outside of JS with the same parameters. The use case I&apos;m interested in is encryption using a public key in JS and decryption with the private key in Elixir. On the JS side, the parameters are: return await window.crypto.subtle.importKey( &quot;spki&quot;, binaryDer, { name: &quot;RSA-OAEP&quot;, hash: &quot;SHA-256&quot; }, true, [&quot;encrypt&quot;] ); The trouble is that RSA-OAEP with SHA-256 support on the openssl side is not available in recent older versions of openssl and while I&apos;ve been able to use the openssl command to do this successfully at one point with some version, I gave up on this approach to testing the process due to poor documentation. However, doing this in Elixir with a recent openssl library and the erlang public_key module is not too difficult and looks like this: Base.decode64!(input, padding: false ) |&gt; :public_key.decrypt_private( key, rsa_padding: :rsa_pkcs1_oaep_padding, rsa_oaep_md: :sha256 )</summary></entry><entry><title type="html">nginx config for acme challenge</title><link href="http://localhost:4005/2021/02/nginx-config-for-acme-challenge/" rel="alternate" type="text/html" title="nginx config for acme challenge" /><published>2021-02-10T15:14:44-05:00</published><updated>2021-02-10T15:14:44-05:00</updated><id>http://localhost:4005/2021/02/nginx-config-for-acme-challenge</id><content type="html" xml:base="http://localhost:4005/2021/02/nginx-config-for-acme-challenge/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;To more transparently support Let&apos;s Encrypt and the acme-challenge for http, here is a config that can be used with nginx. In the case all traffic showing up as HTTP gets redirected to HTTPS, it&apos;s easiest to respond to challenges without the redirect.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:more --&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
&lt;!-- /wp:more --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;server {
        server_name www.yes-www.org yes-www.org www.yes-www.com yes-www.com;

        listen &amp;#91;::]:80;
        listen 80;

        location /.well-known/acme-challenge/ {
            root /var/www;
            try_files $uri =404;
        }

        access_log off;

        return 301 https://$host$request_uri;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This appeared on &lt;a href=&quot;https://serverfault.com/questions/924251/stopping-nginx-to-3021-redirect-for-well-known-location&quot;&gt;serverfault&lt;/a&gt; literally as above. I modified it slightly to strip the initial path part of the URL off with a rewrite, change the location part of above to this:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;    location /.well-known/acme-challenge {
      root /acme-challenge;
      rewrite ^/.well-known/acme-challenge/(.*) /$1 break;
      try_files $uri =404;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Then the challenges will end up in the /acme-challenge directory without a substructure (.well-known/acme-challenge), so when configuring &lt;code&gt;dehydrated&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;WELLKNOWN=/acme-challenge&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;My usual mode of testing this kind of config is to &lt;code&gt;echo hello &gt; /acme-challenge/foo.txt&lt;/code&gt; and then use &lt;code&gt;curl http://domain.io/.well-known/acme-challenge/foo.txt&lt;/code&gt; and if you see &lt;code&gt;hello&lt;/code&gt; then you should be good to go.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="Uncategorized" /><summary type="html">To more transparently support Let&apos;s Encrypt and the acme-challenge for http, here is a config that can be used with nginx. In the case all traffic showing up as HTTP gets redirected to HTTPS, it&apos;s easiest to respond to challenges without the redirect. server { server_name www.yes-www.org yes-www.org www.yes-www.com yes-www.com;</summary></entry><entry><title type="html">SSH keys in Docker</title><link href="http://localhost:4005/2021/02/ssh-keys-in-docker/" rel="alternate" type="text/html" title="SSH keys in Docker" /><published>2021-02-09T13:49:13-05:00</published><updated>2021-02-09T13:49:13-05:00</updated><id>http://localhost:4005/2021/02/ssh-keys-in-docker</id><content type="html" xml:base="http://localhost:4005/2021/02/ssh-keys-in-docker/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;One way that I use docker is to encapsulate all the configuration of a remote site. By using docker-compose and a container that just runs /bin/sh, running commands in a controlled environment is easy as exec. One issue I had is how to use my ssh identity. The most flexible answer is to use secrets with docker-compose.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:more --&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
&lt;!-- /wp:more --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In the Dockerfile, add the following RUN&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;RUN mkdir -p .ssh &amp;amp;&amp;amp; chmod 700 .ssh &amp;amp;&amp;amp; ln -s /run/secrets/user_ssh_key /home/someuser/.ssh/id_rsa&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Then in &lt;code&gt;docker-compose.yml&lt;/code&gt;, a few bits:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In your service definition:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;service:
  some-service:
...
    secrets:
      - user_ssh_key&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Then a secrets section (a top level section):&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;secrets:
  user_ssh_key:
    file: ~/.ssh/id_rsa&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;When the container starts, the content of &lt;code&gt;id_rsa&lt;/code&gt; will appear in &lt;code&gt;/run/secrets/user_ssh_key&lt;/code&gt; with usable permissions, and it will not be part of the image or non-running container.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Then to do ssh using a config that may be only in the container can be done with&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;docker exec -it some-service ssh &amp;#91;some host]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This kind of container can be useful for a bunch of other things since it can be customized with run-time packages, software, etc that the host system doesn&apos;t need to be polluted with.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="Uncategorized" /><summary type="html">One way that I use docker is to encapsulate all the configuration of a remote site. By using docker-compose and a container that just runs /bin/sh, running commands in a controlled environment is easy as exec. One issue I had is how to use my ssh identity. The most flexible answer is to use secrets with docker-compose. In the Dockerfile, add the following RUN RUN mkdir -p .ssh &amp;amp;&amp;amp; chmod 700 .ssh &amp;amp;&amp;amp; ln -s /run/secrets/user_ssh_key /home/someuser/.ssh/id_rsa Then in docker-compose.yml, a few bits: In your service definition: service: some-service: ... secrets: - user_ssh_key Then a secrets section (a top level section): secrets: user_ssh_key: file: ~/.ssh/id_rsa When the container starts, the content of id_rsa will appear in /run/secrets/user_ssh_key with usable permissions, and it will not be part of the image or non-running container. Then to do ssh using a config that may be only in the container can be done with docker exec -it some-service ssh &amp;#91;some host] This kind of container can be useful for a bunch of other things since it can be customized with run-time packages, software, etc that the host system doesn&apos;t need to be polluted with.</summary></entry><entry><title type="html">docker network conflict?</title><link href="http://localhost:4005/2021/01/docker-network-conflict/" rel="alternate" type="text/html" title="docker network conflict?" /><published>2021-01-29T10:43:27-05:00</published><updated>2021-01-29T10:43:27-05:00</updated><id>http://localhost:4005/2021/01/docker-network-conflict</id><content type="html" xml:base="http://localhost:4005/2021/01/docker-network-conflict/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Docker uses 172.17.0.0 as the first network and increments the second octet for each new network. If your network happens to use internal networks in the range, you&apos;ll have routing problems. Here&apos;s how to change what docker uses for numbering networks.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:more --&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
&lt;!-- /wp:more --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Docker uses &lt;code&gt;daemon.json&lt;/code&gt; which is usually in &lt;code&gt;/etc/docker&lt;/code&gt; if you install it as a package. If you install docker as a snap, which is recommended, you&apos;ll find it in &lt;code&gt;/var/snap/docker/current/config/daemon.json&lt;/code&gt;. Here&apos;s an example of the change to make:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;{
  &quot;log-level&quot;:        &quot;error&quot;,
  &quot;storage-driver&quot;:   &quot;overlay2&quot;,
  &quot;default-address-pools&quot;:
  &amp;#91;
    {&quot;base&quot;:&quot;172.100.0.0/16&quot;,&quot;size&quot;:24}
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Add the &quot;default-address-pools&quot; key and the associated value, change the network base to suit your needs. Remember to add a &lt;code&gt;,&lt;/code&gt; to the end of the prior line.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The base will be the first network, successive networks will increment from there. I&apos;ve been unable to find clear documentation on the base value string, but my intuition is that the &lt;code&gt;/16&lt;/code&gt; means each new network provisioned will increment at the 2nd octet, in this case 172.100, 172.101, 172.102, and so on. However, the size, i.e. netmask, will be a &lt;code&gt;/24&lt;/code&gt;. It&apos;s not clear why the network stepping and size are not the same.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;If you&apos;re using snaps, to reload the configuration means restarting the daemon:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;sudo snap restart docker&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;If it doesn&apos;t restart, you can see the logs:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;sudo snap logs docker&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;To see that the change worked, take a look at the bridge, default,  network:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;$ docker network inspect bridge
&amp;#91;
    {
        &quot;Name&quot;: &quot;bridge&quot;,
        &quot;Id&quot;: &quot;c96d8c88432e1120cf0260677f503eb1d2e04c692f81d2e9a034115384e8a763&quot;,
        &quot;Created&quot;: &quot;2021-01-29T07:36:04.76114402-05:00&quot;,
        &quot;Scope&quot;: &quot;local&quot;,
        &quot;Driver&quot;: &quot;bridge&quot;,
        &quot;EnableIPv6&quot;: false,
        &quot;IPAM&quot;: {
            &quot;Driver&quot;: &quot;default&quot;,
            &quot;Options&quot;: null,
            &quot;Config&quot;: &amp;#91;
                {
                    &quot;Subnet&quot;: &quot;172.100.0.0/24&quot;
                }
            ]
        },
        &quot;Internal&quot;: false,
        &quot;Attachable&quot;: false,
        &quot;Ingress&quot;: false,
        &quot;ConfigFrom&quot;: {
            &quot;Network&quot;: &quot;&quot;
        },
        &quot;ConfigOnly&quot;: false,
        &quot;Containers&quot;: {},
        &quot;Options&quot;: {
            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,
            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,
            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,
            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,
            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,
            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;
        },
        &quot;Labels&quot;: {}
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="Docker" /><category term="docker" /><category term="routing" /><category term="networking" /><category term="snaps" /><category term="ubuntu" /><summary type="html">Docker uses 172.17.0.0 as the first network and increments the second octet for each new network. If your network happens to use internal networks in the range, you&apos;ll have routing problems. Here&apos;s how to change what docker uses for numbering networks. Docker uses daemon.json which is usually in /etc/docker if you install it as a package. If you install docker as a snap, which is recommended, you&apos;ll find it in /var/snap/docker/current/config/daemon.json. Here&apos;s an example of the change to make: { &quot;log-level&quot;: &quot;error&quot;, &quot;storage-driver&quot;: &quot;overlay2&quot;, &quot;default-address-pools&quot;: &amp;#91; {&quot;base&quot;:&quot;172.100.0.0/16&quot;,&quot;size&quot;:24} ] } Add the &quot;default-address-pools&quot; key and the associated value, change the network base to suit your needs. Remember to add a , to the end of the prior line. The base will be the first network, successive networks will increment from there. I&apos;ve been unable to find clear documentation on the base value string, but my intuition is that the /16 means each new network provisioned will increment at the 2nd octet, in this case 172.100, 172.101, 172.102, and so on. However, the size, i.e. netmask, will be a /24. It&apos;s not clear why the network stepping and size are not the same. If you&apos;re using snaps, to reload the configuration means restarting the daemon: sudo snap restart docker If it doesn&apos;t restart, you can see the logs: sudo snap logs docker To see that the change worked, take a look at the bridge, default, network: $ docker network inspect bridge &amp;#91; { &quot;Name&quot;: &quot;bridge&quot;, &quot;Id&quot;: &quot;c96d8c88432e1120cf0260677f503eb1d2e04c692f81d2e9a034115384e8a763&quot;, &quot;Created&quot;: &quot;2021-01-29T07:36:04.76114402-05:00&quot;, &quot;Scope&quot;: &quot;local&quot;, &quot;Driver&quot;: &quot;bridge&quot;, &quot;EnableIPv6&quot;: false, &quot;IPAM&quot;: { &quot;Driver&quot;: &quot;default&quot;, &quot;Options&quot;: null, &quot;Config&quot;: &amp;#91; { &quot;Subnet&quot;: &quot;172.100.0.0/24&quot; } ] }, &quot;Internal&quot;: false, &quot;Attachable&quot;: false, &quot;Ingress&quot;: false, &quot;ConfigFrom&quot;: { &quot;Network&quot;: &quot;&quot; }, &quot;ConfigOnly&quot;: false, &quot;Containers&quot;: {}, &quot;Options&quot;: { &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;, &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;, &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;, &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;, &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;, &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot; }, &quot;Labels&quot;: {} } ]</summary></entry><entry><title type="html">iocage networking with vlans</title><link href="http://localhost:4005/2021/01/iocage-networking-with-vlans/" rel="alternate" type="text/html" title="iocage networking with vlans" /><published>2021-01-07T13:26:44-05:00</published><updated>2021-01-07T13:26:44-05:00</updated><id>http://localhost:4005/2021/01/iocage-networking-with-vlans</id><content type="html" xml:base="http://localhost:4005/2021/01/iocage-networking-with-vlans/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;I spent too much time figuring out why traffic was not routing with an iocage/jail configured to run on a VLAN to not write something about it. Here&apos;s the desired outcome:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:quote --&gt;&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;A BSD iocage/jail running on a TruNas core system using vnet with it&apos;s own IP address that&apos;s part of a VLAN (not the untagged network of the NAS system itself).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- /wp:quote --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The questions that arise are:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list {&quot;ordered&quot;:true} --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What bridges to use&lt;/li&gt;
&lt;li&gt;Where to assign IP addresses for the NAS side&lt;/li&gt;
&lt;li&gt;How to configure iocage to attach to the plumbing correctly&lt;/li&gt;
&lt;li&gt;When it doesn&apos;t work, what to look for&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:more --&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
&lt;!-- /wp:more --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Starting with the base interface, bge0, when setting up (or before doing this work) the host IP address is assigned here. It can stay assigned directly to the interface, it doesn&apos;t seem to have any impact.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Moving on to the VLAN (let&apos;s say the VLAN Tag is 52) you want to put the jail on, create a new interface in Network-&amp;gt;Interfaces:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list {&quot;ordered&quot;:true} --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add&lt;/li&gt;
&lt;li&gt;Type: VLAN&lt;/li&gt;
&lt;li&gt;Name: VLAN52&lt;/li&gt;
&lt;li&gt;Parent Interface: bge0&lt;/li&gt;
&lt;li&gt;Vlan tag: 52&lt;/li&gt;
&lt;li&gt;IP address: use an available IP on your 52 vlan that will be for the NAS system itself. This ,just be different from the IP you want to assign to the jail. Be sure to set the mask (/24 usually) to be correct for the IP segment.&lt;/li&gt;
&lt;li&gt;Apply&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Now create a bridge for this interface. A bridge is necessary for iocage to attach the vnet interfaces, think of it as a wiring point where the VLAN52 interface will connect with the jail vnet interface(s), there can be more than one jail/vnet attached to this bridge if you want them to all be on VLAN52. Create the bridge:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list {&quot;ordered&quot;:true} --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Type: bridge&lt;/li&gt;
&lt;li&gt;Name: bridge52 (named after the VLAN it connects)&lt;/li&gt;
&lt;li&gt;Bridge members: vlan52&lt;/li&gt;
&lt;li&gt;IP address: none, since vlan52 has an assigned IP and because assigning an IP for the NAS to the bridge didn&apos;t seem to work.&lt;/li&gt;
&lt;li&gt;Apply&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Now you&apos;ll need to go through &quot;Network Test&quot;, the IP you assigned to the vlan52 interface should be pingable now. You&apos;ll then need to &quot;Save&quot; the network changes. Running &lt;code&gt;ifconfig&lt;/code&gt; after this process should show something that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;bge0: flags=8943&amp;lt;UP,BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; metric 0 mtu 1500
	options=c019b&amp;lt;RXCSUM,TXCSUM,VLAN_MTU,VLAN_HWTAGGING,VLAN_HWCSUM,TSO4,VLAN_HWTSO,LINKSTATE&gt;
	ether aa:aa:aa:aa:aa:aa
	inet 10.10.10.11 netmask 0xffffff00 broadcast 10.10.10.255
	media: Ethernet autoselect (1000baseT &amp;lt;full-duplex&gt;)
	status: active
	nd6 options=9&amp;lt;PERFORMNUD,IFDISABLED&gt;
vlan52: flags=8943&amp;lt;UP,BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; metric 0 mtu 1500
	options=80001&amp;lt;RXCSUM,LINKSTATE&gt;
	ether aa:aa:aa:aa:aa:aa
	inet 10.10.52.11 netmask 0xffffff00 broadcast 10.10.52.255
	groups: vlan
	vlan: 52 vlanpcp: 0 parent interface: bge0
	media: Ethernet autoselect (1000baseT &amp;lt;full-duplex&gt;)
	status: active
	nd6 options=9&amp;lt;PERFORMNUD,IFDISABLED&gt;
bridge52: flags=8843&amp;lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; metric 0 mtu 1500
	ether 02:42:03:1c:d1:34
	id 00:00:00:00:00:00 priority 32768 hellotime 2 fwddelay 15
	maxage 20 holdcnt 6 proto stp-rstp maxaddr 2000 timeout 1200
	root id 00:00:00:00:00:00 priority 32768 ifcost 0 port 0
	member: vlan52 flags=143&amp;lt;LEARNING,DISCOVER,AUTOEDGE,AUTOPTP&gt;
	        ifmaxaddr 0 port 4 priority 128 path cost 55
	groups: bridge
	nd6 options=9&amp;lt;PERFORMNUD,IFDISABLED&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading --&gt;&lt;/p&gt;
&lt;h2&gt;iocage configuration&lt;/h2&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The important point about the iocage configuration to understand, that is not obvious, is that without a few specific and simple steps, iocage will create a new bridge (&lt;code&gt;bridge0&lt;/code&gt;) and attach the vnet&apos;s to that. If you do only have of the steps, it&apos;ll look sort of ok, but won&apos;t work.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Create the jail, the first page of options is routine, name, type (clone), release (based on your system).  Page 2 (Configure Networking):&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list {&quot;ordered&quot;:true} --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;VNET: check&lt;/li&gt;
&lt;li&gt;vnet_default_interface: none (important!)&lt;/li&gt;
&lt;li&gt;ipv4 interface: vnet0&lt;/li&gt;
&lt;li&gt;ipv4 address: set to the IP you&apos;ve chosen for the jail&lt;/li&gt;
&lt;li&gt;ipv4 default router: set if you what the jail to have a route off the vlan&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;You can also use DHCP. At this point all you can do is review and submit. Once you&apos;ve done that, go back an edit the settings. This could be done using &apos;Advanced&apos; during creation also. Go to the network section and observe the setting for interfaces, it&apos;ll default to &lt;code&gt;vnet0:bridge0&lt;/code&gt;. This needs to be changed to &lt;code&gt;vnet0:bridge52&lt;/code&gt;, referring to the bridge we set up above.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The important part here is that setting &lt;code&gt;vnet_default_interface: none&lt;/code&gt; and &lt;code&gt;interfaces: vnet0:bridge52&lt;/code&gt; are the critical pair of settings that will properly put the jail onto &lt;code&gt;bridge52&lt;/code&gt; and create the right connectivity&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading --&gt;&lt;/p&gt;
&lt;h2&gt;Problems&lt;/h2&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;So what happens if these get skipped.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list {&quot;ordered&quot;:true} --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;without `interfaces: `vnet0:bridge52` the jail will be put on the default bridge0 attached to bge0&lt;/li&gt;
&lt;li&gt;without `vnet_default_interface: none` the vnet0 will be attached to bridge52, but iocage will also attach bge0 to bridge52 creating a senseless and non-functioning network. If this happens you&apos;ll see bge0 as a member of bridge52.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;</content><author><name>Dan</name></author><category term="System Admin" /><category term="freebsd" /><category term="jails" /><category term="iocage" /><summary type="html">I spent too much time figuring out why traffic was not routing with an iocage/jail configured to run on a VLAN to not write something about it. Here&apos;s the desired outcome: A BSD iocage/jail running on a TruNas core system using vnet with it&apos;s own IP address that&apos;s part of a VLAN (not the untagged network of the NAS system itself). The questions that arise are: What bridges to use Where to assign IP addresses for the NAS side How to configure iocage to attach to the plumbing correctly When it doesn&apos;t work, what to look for Starting with the base interface, bge0, when setting up (or before doing this work) the host IP address is assigned here. It can stay assigned directly to the interface, it doesn&apos;t seem to have any impact. Moving on to the VLAN (let&apos;s say the VLAN Tag is 52) you want to put the jail on, create a new interface in Network-&amp;gt;Interfaces: Add Type: VLAN Name: VLAN52 Parent Interface: bge0 Vlan tag: 52 IP address: use an available IP on your 52 vlan that will be for the NAS system itself. This ,just be different from the IP you want to assign to the jail. Be sure to set the mask (/24 usually) to be correct for the IP segment. Apply Now create a bridge for this interface. A bridge is necessary for iocage to attach the vnet interfaces, think of it as a wiring point where the VLAN52 interface will connect with the jail vnet interface(s), there can be more than one jail/vnet attached to this bridge if you want them to all be on VLAN52. Create the bridge: Type: bridge Name: bridge52 (named after the VLAN it connects) Bridge members: vlan52 IP address: none, since vlan52 has an assigned IP and because assigning an IP for the NAS to the bridge didn&apos;t seem to work. Apply Now you&apos;ll need to go through &quot;Network Test&quot;, the IP you assigned to the vlan52 interface should be pingable now. You&apos;ll then need to &quot;Save&quot; the network changes. Running ifconfig after this process should show something that looks like this: bge0: flags=8943&amp;lt;UP,BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; metric 0 mtu 1500 options=c019b&amp;lt;RXCSUM,TXCSUM,VLAN_MTU,VLAN_HWTAGGING,VLAN_HWCSUM,TSO4,VLAN_HWTSO,LINKSTATE&gt; ether aa:aa:aa:aa:aa:aa inet 10.10.10.11 netmask 0xffffff00 broadcast 10.10.10.255 media: Ethernet autoselect (1000baseT &amp;lt;full-duplex&gt;) status: active nd6 options=9&amp;lt;PERFORMNUD,IFDISABLED&gt; vlan52: flags=8943&amp;lt;UP,BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; metric 0 mtu 1500 options=80001&amp;lt;RXCSUM,LINKSTATE&gt; ether aa:aa:aa:aa:aa:aa inet 10.10.52.11 netmask 0xffffff00 broadcast 10.10.52.255 groups: vlan vlan: 52 vlanpcp: 0 parent interface: bge0 media: Ethernet autoselect (1000baseT &amp;lt;full-duplex&gt;) status: active nd6 options=9&amp;lt;PERFORMNUD,IFDISABLED&gt; bridge52: flags=8843&amp;lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; metric 0 mtu 1500 ether 02:42:03:1c:d1:34 id 00:00:00:00:00:00 priority 32768 hellotime 2 fwddelay 15 maxage 20 holdcnt 6 proto stp-rstp maxaddr 2000 timeout 1200 root id 00:00:00:00:00:00 priority 32768 ifcost 0 port 0 member: vlan52 flags=143&amp;lt;LEARNING,DISCOVER,AUTOEDGE,AUTOPTP&gt; ifmaxaddr 0 port 4 priority 128 path cost 55 groups: bridge nd6 options=9&amp;lt;PERFORMNUD,IFDISABLED&gt; iocage configuration The important point about the iocage configuration to understand, that is not obvious, is that without a few specific and simple steps, iocage will create a new bridge (bridge0) and attach the vnet&apos;s to that. If you do only have of the steps, it&apos;ll look sort of ok, but won&apos;t work. Create the jail, the first page of options is routine, name, type (clone), release (based on your system). Page 2 (Configure Networking): VNET: check vnet_default_interface: none (important!) ipv4 interface: vnet0 ipv4 address: set to the IP you&apos;ve chosen for the jail ipv4 default router: set if you what the jail to have a route off the vlan You can also use DHCP. At this point all you can do is review and submit. Once you&apos;ve done that, go back an edit the settings. This could be done using &apos;Advanced&apos; during creation also. Go to the network section and observe the setting for interfaces, it&apos;ll default to vnet0:bridge0. This needs to be changed to vnet0:bridge52, referring to the bridge we set up above. The important part here is that setting vnet_default_interface: none and interfaces: vnet0:bridge52 are the critical pair of settings that will properly put the jail onto bridge52 and create the right connectivity Problems So what happens if these get skipped. without `interfaces: `vnet0:bridge52` the jail will be put on the default bridge0 attached to bge0 without `vnet_default_interface: none` the vnet0 will be attached to bridge52, but iocage will also attach bge0 to bridge52 creating a senseless and non-functioning network. If this happens you&apos;ll see bge0 as a member of bridge52.</summary></entry></feed>